<?php

/**
 * Class Bootstrap_Navigation
 */

class Bootstrap_Navigation extends Walker_Nav_Menu {
	
	/**
	 * Starts the list before the elements are added.
	 *
	 * @param string $output Used to append additional content (passed by reference).
	 * @param int $depth Depth of menu item. Used for padding.
	 * @param stdClass $args An object of wp_nav_menu() arguments.
	 *
	 * @see Walker::start_lvl()
	 *
	 * @since 3.0.0
	 *
	 */
	public function start_lvl( &$output, $depth = 0, $args = array() ) {
		parent::start_lvl( $output, $depth, $args ); // TODO: Change the autogenerated stub
	}
	
	/**
	 * Traverse elements to create list from elements.
	 *
	 * Display one element if the element doesn't have any children otherwise,
	 * display the element and its children. Will only traverse up to the max
	 * depth and no ignore elements under that depth. It is possible to set the
	 * max depth to include all depths, see walk() method.
	 *
	 * This method should not be called directly, use the walk() method instead.
	 *
	 * @param object $element Data object.
	 * @param array $children_elements List of elements to continue traversing (passed by reference).
	 * @param int $max_depth Max depth to traverse.
	 * @param int $depth Depth of current element.
	 * @param array $args An array of arguments.
	 * @param string $output Used to append additional content (passed by reference).
	 *
	 * @since 2.5.0
	 *
	 */
	public function display_element( $element, &$children_elements, $max_depth, $depth, $args, &$output ) {
		parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output ); // TODO: Change the autogenerated stub
	}
}

/**
 * Add Bootstrap nav menu item classes to WP Menu
 *
 * @param string[] $classes Array of the CSS classes that are applied to the menu item's `<li>` element.
 * @param WP_Post  $item    The current menu item.
 * @param stdClass $args    An object of wp_nav_menu() arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 *
 * @return array
 */

function add_nav_item_bootstrap_classes( $classes, $item, $args, $depth ) {
	if ( ! $args->walker instanceof Bootstrap_Navigation ) {
		return $classes;
	}
	
	$classes[] = 'nav-item';
	if ( in_array( 'menu-item-has-children', $classes ) ) {
		$classes[] = $depth === 0 ? 'dropdown' : 'dropright';
	}
	
	if ( array_intersect( $classes, array( 'current-menu-item', 'current_page_ancestor', 'current_page_parent' ) ) ) {
		$classes[] = 'active';
	}
	
	return $classes;
}

add_filter( 'nav_menu_css_class', 'add_nav_item_bootstrap_classes', 10, 4 );

/**
 * Add class to submenu wrapper
 *
 * @param array $classes List of submenu classes
 * @param object $args wp_nav_menu args
 *
 * @return array
 */

function add_submenu_bootstrap_classes( $classes, $args ) {
	if ( ! $args->walker instanceof Bootstrap_Navigation ) {
		return $classes;
	}
	
	$classes[] = 'dropdown-menu';
	
	return $classes;
}

add_filter( 'nav_menu_submenu_css_class', 'add_submenu_bootstrap_classes', 10, 2 );

/**
 * Add Bootstrap nav menu link classes and attributes to WP Menu
 *
 * @param array $atts Menu link atts
 * @param WP_Post $item Menu item object
 * @param object $args wp_nav_menu args
 * @param int $depth
 *
 * @return array
 */

function add_nav_link_bootstrap_attr( $atts, $item, $args, $depth ) {
	if ( ! $args->walker instanceof Bootstrap_Navigation ) {
		return $atts;
	}
	$classes = empty( $item->classes ) ? array() : (array) $item->classes;
	
	$atts['class'] = $depth === 0 ? 'nav-link' : 'dropdown-item';
	$atts['class'] .= in_array( 'menu-item-has-children', $classes ) ? ' dropdown-toggle' : '';
	
	return $atts;
}

add_filter( 'nav_menu_link_attributes', 'add_nav_link_bootstrap_attr', 10, 4 );

/**
 * Append dropdown toggle button to menu link
 *
 * @param string   $item_output The menu item's starting HTML output.
 * @param WP_Post  $item        Menu item data object.
 * @param int      $depth       Depth of menu item. Used for padding.
 * @param stdClass $args        An object of wp_nav_menu() arguments.
 *
 * @return string
 */
function append_dropdown_toggle_button( $item_output, $item, $depth, $args ) {
	if ( ! $args->walker instanceof Bootstrap_Navigation ) {
		return $item_output;
	}
	
	$classes = empty( $item->classes ) ? array() : (array) $item->classes;
	if ( in_array( 'menu-item-has-children', $classes ) ) {
		$item_output .= "<button class='submenu-toggle' data-toggle='dropdown' aria-label='Dropdown menu toggle'></button>";
	}
	
	return $item_output;
}

add_filter( 'walker_nav_menu_start_el', 'append_dropdown_toggle_button', 10, 4 );
